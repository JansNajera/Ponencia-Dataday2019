#Cargamos los paquetes necesarios para realizar los pronosticos.
library(devtools)
library(inegiR)
library(dygraphs)
library(dplyr)
library(xts)
library(forecast)
library(ggplot2)
library(ggfortify)
library(stats)
library(fTrading)
library(lmtest)
library(seasonal)
library(fpp2)
library(TSA)
library(tidyr)
library(car)
library(astsa)
library(grid)
library(gridExtra)
library(ggpubr)

#Con un token, pedido al INEGI en su plataforma digitañ, se colocara como texto.
token<- "057ad603-05df-9ff0-608e-61870ab0c56d"

#Conseguimos la Serie de Balanza de Pagos (Importaciones y Exportaciones).
balanza<-trade_balance(token)
Datos<- balanza %>% dplyr::select(1,2,3)
#Seleccionamos y dividimos las importaciones en una muestra de entrenamiento y
#muestra de prueba.
Importaciones<-Datos %>% dplyr::select(1,3)
ImportacionesTrain<-Importaciones[1:324,]
ImportacionesTest<-Importaciones[325:336,]
#Seleccionamos y dividimos las Exportaciones en una muestra de entrenamiento y
#muestra de prueba.
Exportaciones<-Datos %>% dplyr::select(1,2)
ExportacionesTrain<-Exportaciones[1:324,]
ExportacionesTest<-Exportaciones[325:336,]
#HAcemos una grafica para comparar ambas series de tiempo.
ggplot(Importaciones,aes(Dates,Importaciones$Imports))+geom_line(aes(color="Importaciones"))+
  geom_line(data=Exportaciones,aes(Dates,Exportaciones$Exports,color="Exportaciones"))+
  labs(color="Serie:")+ggtitle("Importaciones y Exportaciones de Mexico (1991-2018).")+
  xlab("Años.")+ylab("Millones de Dolares.")

#Descomponer la serie para conocer el comportamiento de sus componentes por
#separado utilizando la funcion stl.
#Importaciones:
autoplot(stl(ts(Exportaciones$Exports, start=c(1991,1),frequency = 12), s.window = "periodic"),ts.colour="blue")+
  ggtitle("Descomposicion de la serie de Exportaciones.")+
  xlab("Periodo.")+ylab("")
#Exportaciones:
autoplot(stl(ts(Importaciones$Imports, start=c(1991,1),frequency = 12), s.window = "periodic"),ts.colour="red")+
  ggtitle("Descomposicion de la serie de Importaciones.")+
  xlab("Periodo.")+ylab("")

#Para conseguir las variaciones estacionales de ambas series.
#Importaciones:
ggseasonplot(ts(Exportaciones$Exports, start=c(1991,1),frequency = 12),polar = TRUE)+
  ggtitle("Impacto del Componente Estacional por años (Exportaciones).")+
  xlab("Meses.")+ylab("")+ theme( axis.text.y = element_blank())+ 
  scale_color_discrete(name='Años.')   
#Exportaciones:
ggseasonplot(ts(Importaciones$Imports, start=c(1991,1),frequency = 12),polar = TRUE)+
  ggtitle("Impacto del Componente Estacional por años (Importaciones).")+
  xlab("Meses.")+ylab("")+ theme( axis.text.y = element_blank())+ 
  scale_color_discrete(name='Años.')  

#HAcemos el calculo para saber si existen outliers.
#Primero, convertimos las variables en Series Temporales Utilizando ts.
ts1 <- ts(ImportacionesTrain$Imports, start=c(1991,1),frequency = 12)
ts2 <- ts(ExportacionesTrain$Exports, start=c(1991,1),frequency = 12)
#La funcion tso ayuda a hacer el calculo de posibles outliers utilizando
#la metodologia SARIMAX, y permite obtener la serie sin el efecto del
#outlier en la serie.
#En Importaciones
outliers_excess_ts <- tsoutliers::tso(ts1,types = c("AO", "TC"))
#Para conocer los Outliers y su efecto en la serie:
outliers_excess_ts
#PAra conseguir el analisis grafico del efecto.
plot(outliers_excess_ts)
#NOs quedaremos con la serie sin el efecto de los outliers.
outliers_excess_ts$outliers
ImportacionesTrain2<-outliers_excess_ts$yadj
plot(ImportacionesTrain2,type="l")
#En Exportaciones (se repite el procedimiento en las importaciones)
outliers_excess_ts <- tsoutliers::tso(ts2,types = c("AO", "TC"))
outliers_excess_ts
plot(outliers_excess_ts)
outliers_excess_ts$outliers
ExportacionesTrain2<-outliers_excess_ts$yadj
plot(ExportacionesTrain2,type="l")

#Ahora, hacemos las pruebas de box-Cox para conocer:
#Las pruebas Box-Cox permiten hacer el calculo de landa utilizando maxima
#verosomilitud, y de esta forma obtener el valor de landa optimo que permita
#obtener la mejor transformacion Box-Cox para la Serie.
#Para Importaciones
FitAR::BoxCox.numeric(ImportacionesTrain2,IIDQ=FALSE)
#Para Exportaciones
FitAR::BoxCox.numeric(ExportacionesTrain2,IIDQ=FALSE)
#Aplicamos las Transformaciones Box-Cox utilizando el valor de Landa que nos arrojo
#la prueba de Box-Cox
ImportacionesTrain2<-BoxCox(ImportacionesTrain2,lambda =0.284)
ExportacionesTrain2<-BoxCox(ExportacionesTrain2,lambda =0.25 )
#Una ves aplicadas las transformaciones necesarias, empezamos a realizar los
#pronosticos de las Series por Separado.

#######################################Importaciones
#Holt-Winter
ts <- ts(ImportacionesTrain2, frequency = 12)
HWImportaciones <- HoltWinters(ts,seasonal="additive")
forecast <- forecast(HWImportaciones, h=12)
#Hacemos las pruebas sobre los residuos de cada modelo:
Residuos<-forecast$residuals
autoplot(Residuos)
#Pruebas de Normalidad
qqnorm(residuals(HWImportaciones)); qqline(residuals(HWImportaciones))
shapiro.test(Residuos)
#Prueba de Autocorrelacion Serial
checkresiduals(HWImportaciones)
#Medicion de la afinidad del modelo predectivo (Medición de la afinidad del modelo predicho 
#(Error medio (ME), Error medio absoluto (MAE), Porcentaje del error medio absoluto (MAPE), Error 
#medio absoluto escalado (MASE), Porcentaje del error medio (MPE), etc.):)
pronostico<-InvBoxCox(forecast$mean,lambda =0.284)
accuracy(pronostico,ImportacionesTest$Imports)
ErroresHWImp<-data.frame(accuracy(pronostico,ImportacionesTest$Imports))
ErroresHWImp<-ErroresHWImp %>% gather(key="Pruebas",value="HW",1:5)
#Para conseguir el crecimiento del intervalo de confianza del pronostico
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(forecast$mean,lambda =0.284),
                          Pronosticolower=InvBoxCox(forecast$lower,lambda =0.284),
                          Pronosticoupper=InvBoxCox(forecast$upper,lambda =0.284)) %>%
  dplyr::select(1,2,4,6)
i1<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = as.numeric(Pronosticomean))) +
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower.95. ,ymax =  Pronosticoupper.95.)) +
  geom_point(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+ 
  geom_line(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+
  ggtitle("Holt-Winters")+ 
  scale_y_continuous(limit = c(25000,55000))



#STLF
ts <- ts(ImportacionesTrain2, frequency = 12)
stlfImportaciones<-stlf(ts)
forecast<- forecast(stlfImportaciones, h = 12)
#Hacemos las pruebas sobre los residuos de cada modelo:
Residuos<-forecast$residuals
autoplot(Residuos)
#Pruebas de Normalidad
qqnorm(residuals(stlfImportaciones)); qqline(residuals(stlfImportaciones))
shapiro.test(Residuos)
#Prueba de Autocorrelacion Serial
checkresiduals(stlfImportaciones)
#Medicion de la afinidad del modelo predectivo (Medición de la afinidad del modelo predicho 
#(Error medio (ME), Error medio absoluto (MAE), Porcentaje del error medio absoluto (MAPE), Error 
#medio absoluto escalado (MASE), Porcentaje del error medio (MPE), etc.):)
pronostico<-InvBoxCox(forecast$mean,lambda =0.284)
accuracy(pronostico,ImportacionesTest$Imports)
ErroresSTLFImp<-data.frame(accuracy(pronostico,ImportacionesTest$Imports))
ErroresSTLFImp<-ErroresSTLFImp %>% gather(key="Pruebas",value="STLF",1:5)
#Para conseguir el crecimiento del intervalo de confianza del pronostico
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(forecast$mean,lambda =0.284),
                          Pronosticolower=InvBoxCox(forecast$lower,lambda =0.284),
                          Pronosticoupper=InvBoxCox(forecast$upper,lambda =0.284)) %>%
  dplyr::select(1,2,4,6)
i2<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = as.numeric(Pronosticomean))) + 
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower.95. ,ymax =  Pronosticoupper.95.)) +
  geom_point(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+ 
  geom_line(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+ggtitle("STLF")+ 
  scale_y_continuous(limit = c(25000,55000))


#ETS
ts <- ts(ImportacionesTrain2, frequency = 12)
etsImportaciones<-ets(ts , damped = TRUE)
forecast <-forecast(etsImportaciones, h = 12)
#Hacemos las pruebas sobre los residuos de cada modelo:
Residuos<-forecast$residuals
autoplot(Residuos)
#Pruebas de Normalidad
qqnorm(residuals(etsImportaciones)); qqline(residuals(etsImportaciones))
shapiro.test(Residuos)
#Prueba de Autocorrelacion Serial
checkresiduals(etsImportaciones)
#Medicion de la afinidad del modelo predectivo (Medición de la afinidad del modelo predicho 
#(Error medio (ME), Error medio absoluto (MAE), Porcentaje del error medio absoluto (MAPE), Error 
#medio absoluto escalado (MASE), Porcentaje del error medio (MPE), etc.):)
pronostico<-InvBoxCox(forecast$mean,lambda =0.284)
accuracy(pronostico,ImportacionesTest$Imports)
ErroresETSFImp<-data.frame(accuracy(pronostico,ImportacionesTest$Imports))
ErroresETSFImp<-ErroresETSFImp %>% gather(key="Pruebas",value="ETS",1:5)
#Para conseguir el crecimiento del intervalo de confianza del pronostico
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(forecast$mean,lambda =0.284),
                          Pronosticolower=InvBoxCox(forecast$lower,lambda =0.284),
                          Pronosticoupper=InvBoxCox(forecast$upper,lambda =0.284)) %>%
  dplyr::select(1,2,4,6)
i3<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = as.numeric(Pronosticomean))) + 
  geom_point(aes(color="blue")) +
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower.95. ,ymax =  Pronosticoupper.95.)) +
  geom_point(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+ 
  geom_line(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+ggtitle("ETS")+ 
  scale_y_continuous(limit = c(25000,55000))



#ARIMA
ts <- ts(ImportacionesTrain2, frequency = 12)
ARIMAImportaciones<-auto.arima(ts,stepwise=FALSE)
forecast <- forecast(ARIMAImportaciones, h=12)
#Hacemos las pruebas sobre los residuos de cada modelo:
Residuos<-forecast$residuals
autoplot(Residuos)
#Pruebas de Autocorrelacion
qqnorm(residuals(ARIMAImportaciones)); qqline(residuals(ARIMAImportaciones))
shapiro.test(Residuos)
#Prueba de Autocorrelacion Serial
checkresiduals(ARIMAImportaciones)
#Medicion de la afinidad del modelo predectivo (Medición de la afinidad del modelo predicho 
#(Error medio (ME), Error medio absoluto (MAE), Porcentaje del error medio absoluto (MAPE), Error 
#medio absoluto escalado (MASE), Porcentaje del error medio (MPE), etc.):)
pronostico<-InvBoxCox(forecast$mean,lambda =0.284)
accuracy(pronostico,ImportacionesTest$Imports)
ErroresARIMAFImp<-data.frame(accuracy(pronostico,ImportacionesTest$Imports))
ErroresARIMAFImp<-ErroresARIMAFImp %>% gather(key="Pruebas",value="ARIMA",1:5)
#Para conseguir el crecimiento del intervalo de confianza del pronostico
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(forecast$mean,lambda =0.284),
                          Pronosticolower=InvBoxCox(forecast$lower,lambda =0.284),
                          Pronosticoupper=InvBoxCox(forecast$upper,lambda =0.284)) %>%
  dplyr::select(1,2,4,6)
i4<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = as.numeric(Pronosticomean))) + 
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower.95. ,ymax =  Pronosticoupper.95.)) +
  geom_point(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+ 
  geom_line(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+ggtitle("ARIMA")+ 
  scale_y_continuous(limit = c(25000,55000))

########################################Exportaciones
#Holt-Winter
ts <- ts(ExportacionesTrain2, frequency = 12)
HWExportaciones <- HoltWinters(ts,seasonal="additive")
forecast <- forecast(HWExportaciones, h=12)
#Hacemos las pruebas sobre los residuos de cada modelo:
Residuos<-forecast$residuals
autoplot(Residuos)
#Pruebas de Normalidad
qqnorm(residuals(HWExportaciones)); qqline(residuals(HWExportaciones))
shapiro.test(Residuos)
#Prueba de Autocorrelacion Serial
checkresiduals(HWExportaciones)
#Medicion de la afinidad del modelo predectivo (Medición de la afinidad del modelo predicho 
#(Error medio (ME), Error medio absoluto (MAE), Porcentaje del error medio absoluto (MAPE), Error 
#medio absoluto escalado (MASE), Porcentaje del error medio (MPE), etc.):)
pronostico<-InvBoxCox(forecast$mean,lambda =0.25)
accuracy(pronostico,ExportacionesTest$Exports)
ErroresHWExp<-data.frame(accuracy(pronostico,ExportacionesTest$Exports))
ErroresHWExp<-ErroresHWExp %>% gather(key="Pruebas",value="HW",1:5)
#Para conseguir el crecimiento del intervalo de confianza del pronostico
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(forecast$mean,lambda =0.25),
                          Pronosticolower=InvBoxCox(forecast$lower,lambda =0.25),
                          Pronosticoupper=InvBoxCox(forecast$upper,lambda =0.25)) %>%
  dplyr::select(1,2,4,6)
E1<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = as.numeric(Pronosticomean))) +
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower.95. ,ymax =  Pronosticoupper.95.)) +
  geom_point(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+ 
  geom_line(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+
  ggtitle("Holt-Winters")+ 
  scale_y_continuous(limit = c(20000,60000))


#STLF
ts <- ts(ExportacionesTrain2, frequency = 12)
stlfImportaciones<- stlf(ts)
forecast <- forecast(stlfImportaciones, h=12)
#Hacemos las pruebas sobre los residuos de cada modelo:
Residuos<-forecast$residuals
autoplot(Residuos)
#Pruebas de Normalidad
qqnorm(residuals(stlfImportaciones)); qqline(residuals(stlfImportaciones))
shapiro.test(Residuos)
#Prueba de Autocorrelacion Serial
checkresiduals(stlfImportaciones)
#Medicion de la afinidad del modelo predectivo (Medición de la afinidad del modelo predicho 
#(Error medio (ME), Error medio absoluto (MAE), Porcentaje del error medio absoluto (MAPE), Error 
#medio absoluto escalado (MASE), Porcentaje del error medio (MPE), etc.):)
pronostico<-InvBoxCox(forecast$mean,lambda =0.25)
accuracy(pronostico,ExportacionesTest$Exports)
ErroresstlfExp<-data.frame(accuracy(pronostico,ExportacionesTest$Exports))
ErroresstlfExp<-ErroresstlfExp %>% gather(key="Pruebas",value="STLF",1:5)
#Para conseguir el crecimiento del intervalo de confianza del pronostico
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(forecast$mean,lambda =0.25),
                          Pronosticolower=InvBoxCox(forecast$lower,lambda =0.25),
                          Pronosticoupper=InvBoxCox(forecast$upper,lambda =0.25)) %>%
  dplyr::select(1,2,4,6)
E2<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = as.numeric(Pronosticomean))) +
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower.95. ,ymax =  Pronosticoupper.95.)) +
  geom_point(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+ 
  geom_line(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+
  ggtitle("STLF")+ 
  scale_y_continuous(limit = c(20000,60000))



#ETS
ts <- ts(ExportacionesTrain2, frequency = 12)
etsExportaciones<-ets(ts, damped = TRUE)
forecast <-forecast(etsExportaciones, h = 12)
#Hacemos las pruebas sobre los residuos de cada modelo:
Residuos<-forecast$residuals
autoplot(Residuos)
#Pruebas de Normalidad
qqnorm(residuals(etsExportaciones)); qqline(residuals(etsExportaciones))
shapiro.test(Residuos)
#Prueba de Autocorrelacion Serial
checkresiduals(etsExportaciones)
#Medicion de la afinidad del modelo predectivo (Medición de la afinidad del modelo predicho 
#(Error medio (ME), Error medio absoluto (MAE), Porcentaje del error medio absoluto (MAPE), Error 
#medio absoluto escalado (MASE), Porcentaje del error medio (MPE), etc.):)
pronostico<-InvBoxCox(forecast$mean,lambda =0.25)
accuracy(pronostico,ExportacionesTest$Exports)
ErroresetsExp<-data.frame(accuracy(pronostico,ExportacionesTest$Exports))
ErroresetsExp<-ErroresetsExp %>% gather(key="Pruebas",value="ETS",1:5)
#Para conseguir el crecimiento del intervalo de confianza del pronostico
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(forecast$mean,lambda =0.25),
                          Pronosticolower=InvBoxCox(forecast$lower,lambda =0.25),
                          Pronosticoupper=InvBoxCox(forecast$upper,lambda =0.25)) %>%
  dplyr::select(1,2,4,6)
E3<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = as.numeric(Pronosticomean))) +
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower.95. ,ymax =  Pronosticoupper.95.)) +
  geom_point(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+ 
  geom_line(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+
  ggtitle("ETS")+ 
  scale_y_continuous(limit = c(20000,60000))


#ARIMA
ts <- ts(ExportacionesTrain2, frequency = 12)
ARIMAExportaciones<-auto.arima(ts,stepwise=FALSE)
forecast <- forecast(ARIMAExportaciones, h=12)
#Hacemos las pruebas sobre los residuos de cada modelo:
Residuos<-forecast$residuals
autoplot(Residuos)
#Prueba de Normalidad
qqnorm(residuals(ARIMAExportaciones)); qqline(residuals(ARIMAExportaciones))
shapiro.test(Residuos)
#Prueba de Autocorrelacion Serial
checkresiduals(ARIMAExportaciones)
#Medicion de la afinidad del modelo predectivo (Medición de la afinidad del modelo predicho 
#(Error medio (ME), Error medio absoluto (MAE), Porcentaje del error medio absoluto (MAPE), Error 
#medio absoluto escalado (MASE), Porcentaje del error medio (MPE), etc.):)
pronostico<-InvBoxCox(forecast$mean,lambda =0.25)
accuracy(pronostico,ExportacionesTest$Exports)
ErroresARIMAExp<-data.frame(accuracy(pronostico,ExportacionesTest$Exports))
ErroresARIMAExp<-ErroresARIMAExp %>% gather(key="Pruebas",value="ARIMA",1:5)
#Para conseguir el crecimiento del intervalo de confianza del pronostico
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(forecast$mean,lambda =0.25),
                          Pronosticolower=InvBoxCox(forecast$lower,lambda =0.25),
                          Pronosticoupper=InvBoxCox(forecast$upper,lambda =0.25)) %>%
  dplyr::select(1,2,4,6)
E4<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = as.numeric(Pronosticomean))) +
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower.95. ,ymax =  Pronosticoupper.95.)) +
  geom_point(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+ 
  geom_line(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+
  ggtitle("ARIMA")+ 
  scale_y_continuous(limit = c(20000,60000))


#Modelos Multivariados:
#VAR
library("vars")

Imp <- ts(ImportacionesTrain2, frequency = 12)
Exp <- ts(ExportacionesTrain2, frequency = 12)
series<-cbind(Imp,Exp)
VARselect(diff(series),lag.max=10,type = c("const", "trend", "both", "none"),
          season=12)
modelo<-VAR(diff(series),p=3,type = c("const", "trend", "both", "none"),
            season = 12)

summary(modelo)
roots(modelo)

#VEC
johansen<-ca.jo(series, type = c("eigen", "trace"),ecdet = c("none", "const", "trend"),K=2,
                season = 12)
summary(johansen)
vecm1<-cajorls(johansen,r=1)
vecm1
vec<-vec2var(johansen)
normality.test(vec, multivariate.only=TRUE)
forecast <- predict(vec,n.ahead=12)
ResiduosImp<-data.frame(forecast$model$resid)
ResiduosImp<-ResiduosImp$resids.of.Imp
plot(ResiduosImp,type="l")
ResiduosExp<-data.frame(forecast$model$resid)
ResiduosExp<-ResiduosExp$resids.of.Exp

autoplot(ts(ResiduosExp, frequency = 12))+
  ggtitle("Residuos de las Exportaciones.")

autoplot(ts(ResiduosImp, frequency = 12))+
  ggtitle("Residuos de las Importaciones.")


#Pruebas de Normalidad en Vectores Cointegrados
shapiro.test(ResiduosImp)
shapiro.test(ResiduosExp)
#qqplot:
qqnorm(ResiduosExp); qqline(ResiduosExp)
qqnorm(ResiduosImp); qqline(ResiduosImp)

ggplot(data=data.frame(ResiduosExp),aes(sample=ResiduosExp))+stat_qq() + stat_qq_line()+
  ggtitle("Grafica QQ-plot de los Residuos de las Exportaciones.")
ggplot(data=data.frame(ResiduosImp),aes(sample=ResiduosImp))+stat_qq() + stat_qq_line()+
  ggtitle("Grafica QQ-plot de los Residuos de las Importaciones.")

#Pruebas de Autocorrelacion
autoplot(acf(ResiduosImp))+
  ggtitle("Autocorrelaciones de los residuos de las Importaciones.")
autoplot(acf(ResiduosExp))+
  ggtitle("Autocorrelaciones de los residuos de las Exportaciones.")
#Acurracy

#Exportaciones
pronosticoExp<-data.frame(forecast$fcst$Exp)
pronosticoExp<-InvBoxCox(pronosticoExp$fcst,lambda =0.25)
accuracy(pronosticoExp,ExportacionesTest$Exports)
ErroresVECEXP<-data.frame(accuracy(pronosticoExp,ExportacionesTest$Exports))
ErroresVECEXP<-ErroresVECEXP %>% gather(key="Pruebas",value="VEC",1:5)

pronosticoExp<-data.frame(forecast$fcst$Exp)
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(pronosticoExp$fcst,lambda =0.25),
                          Pronosticolower=InvBoxCox(pronosticoExp$lower,lambda =0.25),
                          Pronosticoupper=InvBoxCox(pronosticoExp$upper,lambda =0.25)) 

DatosBarError %>% ggplot(aes(x = factor(Meses),y = Pronosticomean)) + 
  geom_point(aes(color="blue")) + 
  geom_errorbar(aes(ymin = Pronosticolower,ymax = Pronosticoupper))+
  geom_point(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red")) 


#Importaciones
pronosticoImp<-data.frame(forecast$fcst$Imp)
pronosticoImp<-InvBoxCox(pronosticoImp$fcst,lambda =0.284 )
accuracy(pronosticoImp,ImportacionesTest$Imports)
ErroresVECIMP<-data.frame(accuracy(pronosticoImp,ImportacionesTest$Imports))
ErroresVECIMP<-ErroresVECIMP %>% gather(key="Pruebas",value="VEC",1:5)

pronosticoImp<-data.frame(forecast$fcst$Imp)
DatosBarError<-data.frame(Meses=c(1:12),Pronosticomean=InvBoxCox(pronosticoImp$fcst,lambda =0.284),
                          Pronosticolower=InvBoxCox(pronosticoImp$lower,lambda =0.284),
                          Pronosticoupper=InvBoxCox(pronosticoImp$upper,lambda =0.284)) 


i5<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = Pronosticomean)) + 
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower ,ymax =  Pronosticoupper)) +
  geom_point(aes(x=c(1:12),y=ImportacionesTest$Imports,color="red"))+ 
  geom_line((aes(x=c(1:12),y=ImportacionesTest$Imports,color="red")))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+ggtitle("VAR/VEC")+ 
  scale_y_continuous(limit = c(25000,55000))

E5<-DatosBarError %>% ggplot(aes(x = factor(Meses),y = Pronosticomean)) + 
  geom_point(aes(color="blue")) + 
  geom_line(data=DatosBarError,aes(x =c(1:12),y = as.numeric(Pronosticomean),color="blue"))+
  geom_errorbar(aes(ymin = Pronosticolower ,ymax =  Pronosticoupper)) +
  geom_point(aes(x=c(1:12),y=ExportacionesTest$Exports,color="red"))+ 
  geom_line((aes(x=c(1:12),y=ExportacionesTest$Exports,color="red")))+
  theme(legend.position="none",plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),axis.title.y = element_blank())+ggtitle("VAR/VEC")+ 
  scale_y_continuous(limit = c(20000,60000))

#Resultados:
ResultadosImp<-merge(ErroresHWImp,ErroresETSFImp)
ResultadosImp<-merge(ResultadosImp,ErroresSTLFImp)
ResultadosImp<-merge(ResultadosImp,ErroresARIMAFImp)
ResultadosImp<-merge(ResultadosImp,ErroresVECIMP)


ResultadosExp<-merge(ErroresHWExp,ErroresetsExp)
ResultadosExp<-merge(ResultadosExp,ErroresstlfExp)
ResultadosExp<-merge(ResultadosExp,ErroresARIMAExp)
ResultadosExp<-merge(ResultadosExp,ErroresVECEXP)

#ME: Error Medio
#RMSE: Raiz del Error Cuadrado Medio
#MAE:Error Absoluto Medio
#MPE: Porcentaje del Error Promedio
#MAPE: Porcentaje del Error Absoluto Promedio

#Grafica de Pronosticos con Intervalos y pronosticos



#Importaciones
stable.pi <- ggtexttable(ResultadosImp, rows = NULL, 
                         theme = ttheme("lBlack"))

grid.arrange(i1,i2,i3,i4,i5,stable.pi,
             top = textGrob("Comparacion de distintos metodos para pronosticar las Importaciones.",gp=gpar(fontsize=20,font=3)))

stable.pe <- ggtexttable(ResultadosExp, rows = NULL, 
                         theme = ttheme("lBlack"))

grid.arrange(E1,E2,E3,E4,E5,stable.pe,
             top = textGrob("Comparacion de distintos metodos para pronosticar las Exportaciones.",gp=gpar(fontsize=20,font=3)))

